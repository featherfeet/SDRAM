	component sdram_system is
		port (
			clk_clk                        : in    std_logic                     := 'X';             -- clk
			reset_reset_n                  : in    std_logic                     := 'X';             -- reset_n
			sdram_controller_pins_addr     : out   std_logic_vector(11 downto 0);                    -- addr
			sdram_controller_pins_ba       : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_controller_pins_cas_n    : out   std_logic;                                        -- cas_n
			sdram_controller_pins_cke      : out   std_logic;                                        -- cke
			sdram_controller_pins_cs_n     : out   std_logic;                                        -- cs_n
			sdram_controller_pins_dq       : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			sdram_controller_pins_dqm      : out   std_logic_vector(1 downto 0);                     -- dqm
			sdram_controller_pins_ras_n    : out   std_logic;                                        -- ras_n
			sdram_controller_pins_we_n     : out   std_logic;                                        -- we_n
			avalon_bridge_pins_address     : in    std_logic_vector(22 downto 0) := (others => 'X'); -- address
			avalon_bridge_pins_byte_enable : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byte_enable
			avalon_bridge_pins_read        : in    std_logic                     := 'X';             -- read
			avalon_bridge_pins_write       : in    std_logic                     := 'X';             -- write
			avalon_bridge_pins_write_data  : in    std_logic_vector(15 downto 0) := (others => 'X'); -- write_data
			avalon_bridge_pins_acknowledge : out   std_logic;                                        -- acknowledge
			avalon_bridge_pins_read_data   : out   std_logic_vector(15 downto 0)                     -- read_data
		);
	end component sdram_system;

